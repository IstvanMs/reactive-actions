===============================================================================

ReactiveActions has been installed successfully!

SETUP COMPLETED:
================

âœ“ Routes added to config/routes.rb:
  mount ReactiveActions::Engine, at: '/reactive_actions'

âœ“ JavaScript client configured with automatic initialization
  - Added to config/importmap.rb
  - Initialized in app/javascript/application.js
  - Available globally as window.ReactiveActions

âœ“ Sample action created:
  app/reactive_actions/example_action.rb

QUICK START:
============

1. Test the API endpoint:
   curl -X POST http://localhost:3000/reactive_actions/execute \
     -H "Content-Type: application/json" \
     -d '{"action_name": "example", "action_params": {"name": "YourName"}}'

2. Use JavaScript client:
   ReactiveActions.execute('example', { name: 'YourName' })
     .then(response => console.log(response))

3. Use DOM binding (no JavaScript required):
   <button reactive-action="click->example" 
           reactive-action-name="YourName">
     Test Action
   </button>

JAVASCRIPT CLIENT:
==================

The ReactiveActions client is automatically initialized and available as:
- window.ReactiveActions (global)
- Supports all HTTP methods: get, post, put, patch, delete
- Automatic CSRF token handling
- DOM binding with mutation observer

Examples:
  // Execute actions
  ReactiveActions.execute('action_name', { param: 'value' })
  ReactiveActions.post('create_user', { name: 'John' })
  ReactiveActions.get('fetch_data', { id: 123 })

  // Configuration (if needed)
  ReactiveActions.configure({
    baseUrl: '/custom/path/execute',
    defaultHttpMethod: 'PUT'
  }).reinitialize()

DOM BINDING:
============

Add reactive-action attributes to any element:

  <!-- Basic actions -->
  <button reactive-action="click->update_user">Update</button>
  <input reactive-action="change->search" type="text">
  <form reactive-action="submit->create_post">...</form>

  <!-- With HTTP methods -->
  <button reactive-action="click->put#update_user">Update (PUT)</button>
  <button reactive-action="click->delete#remove_user">Delete</button>

  <!-- Pass data via attributes -->
  <button reactive-action="click->update_user"
          reactive-action-user-id="123"
          reactive-action-name="John">
    Update User
  </button>

CREATING ACTIONS:
=================

Add files to app/reactive_actions/:

  # app/reactive_actions/update_user_action.rb
  class UpdateUserAction < ReactiveActions::ReactiveAction
    def action
      user = User.find(action_params[:user_id])
      user.update(name: action_params[:name])
      @result = { success: true, user: user.as_json }
    end

    def response
      render json: @result
    end
  end

DOCUMENTATION & SUPPORT:
========================

For complete documentation and examples:
  https://github.com/IstvanMs/reactive-actions

For troubleshooting and configuration options:
  Check config/initializers/reactive_actions.rb

Happy coding with ReactiveActions! ðŸš€

===============================================================================